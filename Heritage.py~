# -*- coding: latin-1 -*-


from BaseOps import *
from Family import *
from Geography import *
from WorldGeneration import *
from Initialise import initialise

#Elementar für die Fensterdarstellung
os.environ['SDL_VIDEODRIVER'] = 'windib'

world = Image.open("Quadrat.bmp")
	
xsz, ysz = world.size

NOW = 0 # Beginn der Zeitlinie in Tagen
FPS = 30 # frames per second, the general speed of the program
WINDOWWIDTH = xsz # size of window's width in pixels
WINDOWHEIGHT = ysz # size of windows' height in pixels


land = initialise(NOW)

'''#(City.cits, Capital.caps, District.dists, points, land)
phile = open("Lands.htg", "r")
data = pickle.load(phile)
phile.close()
City.cits, Capital.caps, District.dists, points, land = data

for m, i in enumerate(Capital.caps):
	progress(m, len(Capital.caps))
	i.appointRuler(Person(NOW - randint(16, 60) * Person.DAYSPERYEAR, None, None, i, sex = 0))
	for j in range(randint(20, 60)):
		i.getRuler().pledge(Person(NOW - randint(16, 60) * Person.DAYSPERYEAR, None, None, i, sex = 0))
	
	n = i.getDistrict().getBordering()
	for district in n:
		Path(i, district.getCap(), i.eucDist(district.getCap().getPos()))
		
	
for m, i in enumerate(City.cits):
	progress(m, len(City.cits))
	if i in Capital.caps:
		continue
	p = Person(NOW - randint(16, 60) * Person.DAYSPERYEAR, None, None, i, sex = 0)
	i.appointRuler(p)
	i.getCap().getRuler().pledge(p)
	for j in range(randint(2, 12)):
		i.getRuler().pledge(Person(NOW - randint(16, 60) * Person.DAYSPERYEAR, None, None, i, sex = 0))
	
	#Straßen initialisieren
	
	Path(i, i.getCap(), i.eucDist(i.getCap().getPos()))
	n = i.getBordering()
	for city in n:
		Path(i, city, i.eucDist(city.getPos()))


# Sicherstellen, dass alle Städte miteinander verbunden sind

def recConnect():
	cityOne = Capital.caps[0]
	for i in Capital.caps:
		i.forgetAllWays()
		if not i.wayToExists(cityOne):
			print i
			Path(i, cityOne, i.eucDist(cityOne.getPos()))
			recConnect()
			break'''










YOU = Capital.caps[1].getRuler()
print YOU.strRule()

pygame.init()
FPSCLOCK = pygame.time.Clock()
DISPLAY = pygame.display.set_mode((WINDOWWIDTH, WINDOWHEIGHT))	#Ein Surface-Objekt!
mapCons = pygame.image.load("Countries.bmp")
mapCits = pygame.image.load("Cities.bmp")
pygame.display.set_caption('Il Principe')

#Default-Mausposition
mx = 0
my = 0

def frameArea(x, y, distMode, colour):
	if distMode:
		refList = District.dists
	else:
		refList = City.cits
	for i in refList:
		l = i.getLands()
		if (x, y) in l:
			b = i.getBorders()
			for j in b:
				pygame.draw.line(DISPLAY, colour, j, j)
			if distMode:
				for city in i.realm:
					pos = city.getPos()
					pygame.draw.rect(DISPLAY, RED, (pos[0] - 1, pos[1] - 1, 3, 3), 0)
				pos = i.cap.getPos()
				pygame.draw.rect(DISPLAY, RED, (pos[0] - 2, pos[1] - 2, 5, 5), 0)
			else:
				streets = i.getPaths()
				for j in streets:
					pygame.draw.line(DISPLAY, BLUE, i.getPos(), j.goto(i).getPos())
				
				pos = i.getPos()
				pygame.draw.rect(DISPLAY, colour, (pos[0] - 2, pos[1] - 2, 5, 5), 0)
			break
	
		
		

while True:
	moved = False
	for event in pygame.event.get():
		if event.type == QUIT:
			pygame.quit()
			sys.exit()
		
		elif event.type == MOUSEMOTION:
			moved = True
			mx, my = event.pos
					
	DISPLAY.blit(mapCons, (0, 0))
	frameArea(mx, my, True, PURPLE)
	frameArea(mx, my, False, ORANGE)
	if isCity((mx, my)):
		here = cityAt((mx, my))
		if moved:
			print str(cityAt((mx, my)))
		way = Capital.caps[0].getWayTo(here)[0]
		for i in range(len(way) - 1):
			pygame.draw.line(DISPLAY, BLUE, way[i].getPos(), way[i + 1].getPos())
	pygame.display.update()
	FPSCLOCK.tick(FPS)
